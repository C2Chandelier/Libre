{"ast":null,"code":"import React from 'react';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nexport function shouldSetPanResponder(_event, gesture) {\n  var dx = gesture.dx,\n    dy = gesture.dy;\n  var offset = 2;\n  return Math.abs(dx) > offset || Math.abs(dy) > offset;\n}\nexport function shouldDismissView(newAnimatedValue, gesture) {\n  var dismissThreshold = 0.65;\n  var vy = gesture.vy,\n    dy = gesture.dy;\n  return newAnimatedValue <= dismissThreshold || Math.abs(vy) >= dismissThreshold && dy < 0;\n}\nexport function usePanResponder(_ref) {\n  var animatedValue = _ref.animatedValue,\n    computeNewAnimatedValueForGesture = _ref.computeNewAnimatedValueForGesture,\n    onDismiss = _ref.onDismiss,\n    onRestore = _ref.onRestore;\n  var onMove = React.useCallback(function (_event, gesture) {\n    var _animatedValue$curren;\n    var newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n    (_animatedValue$curren = animatedValue.current) == null ? void 0 : _animatedValue$curren.setValue(newAnimatedValue);\n  }, [animatedValue, computeNewAnimatedValueForGesture]);\n  var onRelease = React.useCallback(function (_event, gesture) {\n    var newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n    if (shouldDismissView(newAnimatedValue, gesture)) {\n      onDismiss();\n    } else {\n      onRestore();\n    }\n  }, [computeNewAnimatedValueForGesture, onDismiss, onRestore]);\n  var panResponder = React.useMemo(function () {\n    return PanResponder.create({\n      onMoveShouldSetPanResponder: shouldSetPanResponder,\n      onMoveShouldSetPanResponderCapture: shouldSetPanResponder,\n      onPanResponderMove: onMove,\n      onPanResponderRelease: onRelease\n    });\n  }, [onMove, onRelease]);\n  return {\n    panResponder: panResponder,\n    onMove: onMove,\n    onRelease: onRelease\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}