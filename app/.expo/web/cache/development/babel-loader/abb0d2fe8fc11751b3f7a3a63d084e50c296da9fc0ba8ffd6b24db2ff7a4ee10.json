{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"config\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from 'react';\nimport { LoggerProvider } from \"./contexts\";\nimport { ToastUI } from \"./ToastUI\";\nimport { useToast } from \"./useToast\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ToastRoot = React.forwardRef(function (props, ref) {\n  var config = props.config,\n    defaultOptions = _objectWithoutProperties(props, _excluded);\n  var _useToast = useToast({\n      defaultOptions: defaultOptions\n    }),\n    show = _useToast.show,\n    hide = _useToast.hide,\n    isVisible = _useToast.isVisible,\n    options = _useToast.options,\n    data = _useToast.data;\n  React.useImperativeHandle(ref, React.useCallback(function () {\n    return {\n      show: show,\n      hide: hide\n    };\n  }, [hide, show]));\n  return _jsx(ToastUI, {\n    isVisible: isVisible,\n    options: options,\n    data: data,\n    hide: hide,\n    show: show,\n    config: config\n  });\n});\nvar refs = [];\nfunction addNewRef(newRef) {\n  refs.push({\n    current: newRef\n  });\n}\nfunction removeOldRef(oldRef) {\n  refs = refs.filter(function (r) {\n    return r.current !== oldRef;\n  });\n}\nexport function Toast(props) {\n  var toastRef = React.useRef(null);\n  var setRef = React.useCallback(function (ref) {\n    if (ref) {\n      toastRef.current = ref;\n      addNewRef(ref);\n    } else {\n      removeOldRef(toastRef.current);\n    }\n  }, []);\n  return _jsx(LoggerProvider, {\n    enableLogs: false,\n    children: _jsx(ToastRoot, _objectSpread({\n      ref: setRef\n    }, props))\n  });\n}\nfunction getRef() {\n  var reversePriority = _toConsumableArray(refs).reverse();\n  var activeRef = reversePriority.find(function (ref) {\n    return (ref == null ? void 0 : ref.current) !== null;\n  });\n  if (!activeRef) {\n    return null;\n  }\n  return activeRef.current;\n}\nToast.show = function (params) {\n  var _getRef;\n  (_getRef = getRef()) == null ? void 0 : _getRef.show(params);\n};\nToast.hide = function (params) {\n  var _getRef2;\n  (_getRef2 = getRef()) == null ? void 0 : _getRef2.hide(params);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}