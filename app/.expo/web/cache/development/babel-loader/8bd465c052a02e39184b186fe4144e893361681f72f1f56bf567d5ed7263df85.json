{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"contentContainerStyle\", \"horizontal\", \"onContentSizeChange\", \"refreshControl\", \"stickyHeaderIndices\", \"pagingEnabled\", \"forwardedRef\", \"keyboardDismissMode\", \"onScroll\", \"centerContent\"];\nimport Dimensions from \"../Dimensions\";\nimport dismissKeyboard from \"../../modules/dismissKeyboard\";\nimport invariant from 'fbjs/lib/invariant';\nimport mergeRefs from \"../../modules/mergeRefs\";\nimport Platform from \"../Platform\";\nimport ScrollViewBase from \"./ScrollViewBase\";\nimport StyleSheet from \"../StyleSheet\";\nimport TextInputState from \"../../modules/TextInputState\";\nimport UIManager from \"../UIManager\";\nimport View from \"../View\";\nimport React from 'react';\nimport warning from 'fbjs/lib/warning';\nvar emptyObject = {};\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nvar ScrollView = function (_React$Component) {\n  _inherits(ScrollView, _React$Component);\n  var _super = _createSuper(ScrollView);\n  function ScrollView() {\n    var _this;\n    _classCallCheck(this, ScrollView);\n    _this = _super.apply(this, arguments);\n    _this._scrollNodeRef = null;\n    _this._innerViewRef = null;\n    _this.isTouching = false;\n    _this.lastMomentumScrollBeginTime = 0;\n    _this.lastMomentumScrollEndTime = 0;\n    _this.observedScrollSinceBecomingResponder = false;\n    _this.becameResponderWhileAnimating = false;\n    _this.scrollResponderHandleScrollShouldSetResponder = function () {\n      return _this.isTouching;\n    };\n    _this.scrollResponderHandleStartShouldSetResponderCapture = function (e) {\n      return _this.scrollResponderIsAnimating();\n    };\n    _this.scrollResponderHandleTerminationRequest = function () {\n      return !_this.observedScrollSinceBecomingResponder;\n    };\n    _this.scrollResponderHandleTouchEnd = function (e) {\n      var nativeEvent = e.nativeEvent;\n      _this.isTouching = nativeEvent.touches.length !== 0;\n      _this.props.onTouchEnd && _this.props.onTouchEnd(e);\n    };\n    _this.scrollResponderHandleResponderRelease = function (e) {\n      _this.props.onResponderRelease && _this.props.onResponderRelease(e);\n      var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n      if (!_this.props.keyboardShouldPersistTaps && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !_this.observedScrollSinceBecomingResponder && !_this.becameResponderWhileAnimating) {\n        _this.props.onScrollResponderKeyboardDismissed && _this.props.onScrollResponderKeyboardDismissed(e);\n        TextInputState.blurTextInput(currentlyFocusedTextInput);\n      }\n    };\n    _this.scrollResponderHandleScroll = function (e) {\n      _this.observedScrollSinceBecomingResponder = true;\n      _this.props.onScroll && _this.props.onScroll(e);\n    };\n    _this.scrollResponderHandleResponderGrant = function (e) {\n      _this.observedScrollSinceBecomingResponder = false;\n      _this.props.onResponderGrant && _this.props.onResponderGrant(e);\n      _this.becameResponderWhileAnimating = _this.scrollResponderIsAnimating();\n    };\n    _this.scrollResponderHandleScrollBeginDrag = function (e) {\n      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);\n    };\n    _this.scrollResponderHandleScrollEndDrag = function (e) {\n      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);\n    };\n    _this.scrollResponderHandleMomentumScrollBegin = function (e) {\n      _this.lastMomentumScrollBeginTime = Date.now();\n      _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);\n    };\n    _this.scrollResponderHandleMomentumScrollEnd = function (e) {\n      _this.lastMomentumScrollEndTime = Date.now();\n      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);\n    };\n    _this.scrollResponderHandleTouchStart = function (e) {\n      _this.isTouching = true;\n      _this.props.onTouchStart && _this.props.onTouchStart(e);\n    };\n    _this.scrollResponderHandleTouchMove = function (e) {\n      _this.props.onTouchMove && _this.props.onTouchMove(e);\n    };\n    _this.scrollResponderIsAnimating = function () {\n      var now = Date.now();\n      var timeSinceLastMomentumScrollEnd = now - _this.lastMomentumScrollEndTime;\n      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this.lastMomentumScrollEndTime < _this.lastMomentumScrollBeginTime;\n      return isAnimating;\n    };\n    _this.scrollResponderScrollTo = function (x, y, animated) {\n      if (typeof x === 'number') {\n        console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');\n      } else {\n        var _ref = x || emptyObject;\n        x = _ref.x;\n        y = _ref.y;\n        animated = _ref.animated;\n      }\n      var node = _this.getScrollableNode();\n      var left = x || 0;\n      var top = y || 0;\n      if (node != null) {\n        if (typeof node.scroll === 'function') {\n          node.scroll({\n            top: top,\n            left: left,\n            behavior: !animated ? 'auto' : 'smooth'\n          });\n        } else {\n          node.scrollLeft = left;\n          node.scrollTop = top;\n        }\n      }\n    };\n    _this.scrollResponderZoomTo = function (rect, animated) {\n      if (Platform.OS !== 'ios') {\n        invariant('zoomToRect is not implemented');\n      }\n    };\n    _this.scrollResponderScrollNativeHandleToKeyboard = function (nodeHandle, additionalOffset, preventNegativeScrollOffset) {\n      _this.additionalScrollOffset = additionalOffset || 0;\n      _this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n      UIManager.measureLayout(nodeHandle, _this.getInnerViewNode(), _this.scrollResponderTextInputFocusError, _this.scrollResponderInputMeasureAndScrollToKeyboard);\n    };\n    _this.scrollResponderInputMeasureAndScrollToKeyboard = function (left, top, width, height) {\n      var keyboardScreenY = Dimensions.get('window').height;\n      if (_this.keyboardWillOpenTo) {\n        keyboardScreenY = _this.keyboardWillOpenTo.endCoordinates.screenY;\n      }\n      var scrollOffsetY = top - keyboardScreenY + height + _this.additionalScrollOffset;\n      if (_this.preventNegativeScrollOffset) {\n        scrollOffsetY = Math.max(0, scrollOffsetY);\n      }\n      _this.scrollResponderScrollTo({\n        x: 0,\n        y: scrollOffsetY,\n        animated: true\n      });\n      _this.additionalOffset = 0;\n      _this.preventNegativeScrollOffset = false;\n    };\n    _this.scrollResponderKeyboardWillShow = function (e) {\n      _this.keyboardWillOpenTo = e;\n      _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);\n    };\n    _this.scrollResponderKeyboardWillHide = function (e) {\n      _this.keyboardWillOpenTo = null;\n      _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);\n    };\n    _this.scrollResponderKeyboardDidShow = function (e) {\n      if (e) {\n        _this.keyboardWillOpenTo = e;\n      }\n      _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);\n    };\n    _this.scrollResponderKeyboardDidHide = function (e) {\n      _this.keyboardWillOpenTo = null;\n      _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);\n    };\n    _this.flashScrollIndicators = function () {\n      _this.scrollResponderFlashScrollIndicators();\n    };\n    _this.getScrollResponder = function () {\n      return _assertThisInitialized(_this);\n    };\n    _this.getScrollableNode = function () {\n      return _this._scrollNodeRef;\n    };\n    _this.getInnerViewRef = function () {\n      return _this._innerViewRef;\n    };\n    _this.getInnerViewNode = function () {\n      return _this._innerViewRef;\n    };\n    _this.getNativeScrollRef = function () {\n      return _this._scrollNodeRef;\n    };\n    _this.scrollTo = function (y, x, animated) {\n      if (typeof y === 'number') {\n        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.');\n      } else {\n        var _ref2 = y || emptyObject;\n        x = _ref2.x;\n        y = _ref2.y;\n        animated = _ref2.animated;\n      }\n      _this.scrollResponderScrollTo({\n        x: x || 0,\n        y: y || 0,\n        animated: animated !== false\n      });\n    };\n    _this.scrollToEnd = function (options) {\n      var animated = (options && options.animated) !== false;\n      var horizontal = _this.props.horizontal;\n      var scrollResponderNode = _this.getScrollableNode();\n      var x = horizontal ? scrollResponderNode.scrollWidth : 0;\n      var y = horizontal ? 0 : scrollResponderNode.scrollHeight;\n      _this.scrollResponderScrollTo({\n        x: x,\n        y: y,\n        animated: animated\n      });\n    };\n    _this._handleContentOnLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        width = _e$nativeEvent$layout.width,\n        height = _e$nativeEvent$layout.height;\n      _this.props.onContentSizeChange(width, height);\n    };\n    _this._handleScroll = function (e) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (_this.props.onScroll && _this.props.scrollEventThrottle == null) {\n          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + \"cause frame drops, use a bigger number if you don't need as \" + 'much precision.');\n        }\n      }\n      if (_this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n      _this.scrollResponderHandleScroll(e);\n    };\n    _this._setInnerViewRef = function (node) {\n      _this._innerViewRef = node;\n    };\n    _this._setScrollNodeRef = function (node) {\n      _this._scrollNodeRef = node;\n      if (node != null) {\n        node.getScrollResponder = _this.getScrollResponder;\n        node.getInnerViewNode = _this.getInnerViewNode;\n        node.getInnerViewRef = _this.getInnerViewRef;\n        node.getNativeScrollRef = _this.getNativeScrollRef;\n        node.getScrollableNode = _this.getScrollableNode;\n        node.scrollTo = _this.scrollTo;\n        node.scrollToEnd = _this.scrollToEnd;\n        node.flashScrollIndicators = _this.flashScrollIndicators;\n        node.scrollResponderZoomTo = _this.scrollResponderZoomTo;\n        node.scrollResponderScrollNativeHandleToKeyboard = _this.scrollResponderScrollNativeHandleToKeyboard;\n      }\n      var ref = mergeRefs(_this.props.forwardedRef);\n      ref(node);\n    };\n    return _this;\n  }\n  _createClass(ScrollView, [{\n    key: \"scrollResponderHandleStartShouldSetResponder\",\n    value: function scrollResponderHandleStartShouldSetResponder() {\n      return false;\n    }\n  }, {\n    key: \"scrollResponderHandleResponderReject\",\n    value: function scrollResponderHandleResponderReject() {\n      warning(false, \"ScrollView doesn't take rejection well - scrolls anyway\");\n    }\n  }, {\n    key: \"scrollResponderFlashScrollIndicators\",\n    value: function scrollResponderFlashScrollIndicators() {}\n  }, {\n    key: \"scrollResponderTextInputFocusError\",\n    value: function scrollResponderTextInputFocusError(e) {\n      console.error('Error measuring text field: ', e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        contentContainerStyle = _this$props.contentContainerStyle,\n        horizontal = _this$props.horizontal,\n        onContentSizeChange = _this$props.onContentSizeChange,\n        refreshControl = _this$props.refreshControl,\n        stickyHeaderIndices = _this$props.stickyHeaderIndices,\n        pagingEnabled = _this$props.pagingEnabled,\n        forwardedRef = _this$props.forwardedRef,\n        keyboardDismissMode = _this$props.keyboardDismissMode,\n        onScroll = _this$props.onScroll,\n        centerContent = _this$props.centerContent,\n        other = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      if (process.env.NODE_ENV !== 'production' && this.props.style) {\n        var style = StyleSheet.flatten(this.props.style);\n        var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {\n          return style && style[prop] !== undefined;\n        });\n        invariant(childLayoutProps.length === 0, \"ScrollView child layout (\" + JSON.stringify(childLayoutProps) + \") \" + 'must be applied through the contentContainerStyle prop.');\n      }\n      var contentSizeChangeProps = {};\n      if (onContentSizeChange) {\n        contentSizeChangeProps = {\n          onLayout: this._handleContentOnLayout\n        };\n      }\n      var hasStickyHeaderIndices = !horizontal && Array.isArray(stickyHeaderIndices);\n      var children = hasStickyHeaderIndices || pagingEnabled ? React.Children.map(this.props.children, function (child, i) {\n        var isSticky = hasStickyHeaderIndices && stickyHeaderIndices.indexOf(i) > -1;\n        if (child != null && (isSticky || pagingEnabled)) {\n          return React.createElement(View, {\n            style: [isSticky && styles.stickyHeader, pagingEnabled && styles.pagingEnabledChild]\n          }, child);\n        } else {\n          return child;\n        }\n      }) : this.props.children;\n      var contentContainer = React.createElement(View, _extends({}, contentSizeChangeProps, {\n        children: children,\n        collapsable: false,\n        ref: this._setInnerViewRef,\n        style: [horizontal && styles.contentContainerHorizontal, centerContent && styles.contentContainerCenterContent, contentContainerStyle]\n      }));\n      var baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;\n      var pagingEnabledStyle = horizontal ? styles.pagingEnabledHorizontal : styles.pagingEnabledVertical;\n      var props = _objectSpread(_objectSpread({}, other), {}, {\n        style: [baseStyle, pagingEnabled && pagingEnabledStyle, this.props.style],\n        onTouchStart: this.scrollResponderHandleTouchStart,\n        onTouchMove: this.scrollResponderHandleTouchMove,\n        onTouchEnd: this.scrollResponderHandleTouchEnd,\n        onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,\n        onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,\n        onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,\n        onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,\n        onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,\n        onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,\n        onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,\n        onScroll: this._handleScroll,\n        onResponderGrant: this.scrollResponderHandleResponderGrant,\n        onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,\n        onResponderTerminate: this.scrollResponderHandleTerminate,\n        onResponderRelease: this.scrollResponderHandleResponderRelease,\n        onResponderReject: this.scrollResponderHandleResponderReject\n      });\n      var ScrollViewClass = ScrollViewBase;\n      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');\n      var scrollView = React.createElement(ScrollViewClass, _extends({}, props, {\n        ref: this._setScrollNodeRef\n      }), contentContainer);\n      if (refreshControl) {\n        return React.cloneElement(refreshControl, {\n          style: props.style\n        }, scrollView);\n      }\n      return scrollView;\n    }\n  }]);\n  return ScrollView;\n}(React.Component);\nvar commonStyle = {\n  flexGrow: 1,\n  flexShrink: 1,\n  transform: 'translateZ(0)',\n  WebkitOverflowScrolling: 'touch'\n};\nvar styles = StyleSheet.create({\n  baseVertical: _objectSpread(_objectSpread({}, commonStyle), {}, {\n    flexDirection: 'column',\n    overflowX: 'hidden',\n    overflowY: 'auto'\n  }),\n  baseHorizontal: _objectSpread(_objectSpread({}, commonStyle), {}, {\n    flexDirection: 'row',\n    overflowX: 'auto',\n    overflowY: 'hidden'\n  }),\n  contentContainerHorizontal: {\n    flexDirection: 'row'\n  },\n  contentContainerCenterContent: {\n    justifyContent: 'center',\n    flexGrow: 1\n  },\n  stickyHeader: {\n    position: 'sticky',\n    top: 0,\n    zIndex: 10\n  },\n  pagingEnabledHorizontal: {\n    scrollSnapType: 'x mandatory'\n  },\n  pagingEnabledVertical: {\n    scrollSnapType: 'y mandatory'\n  },\n  pagingEnabledChild: {\n    scrollSnapAlign: 'start'\n  }\n});\nvar ForwardedScrollView = React.forwardRef(function (props, forwardedRef) {\n  return React.createElement(ScrollView, _extends({}, props, {\n    forwardedRef: forwardedRef\n  }));\n});\nForwardedScrollView.displayName = 'ScrollView';\nexport default ForwardedScrollView;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}