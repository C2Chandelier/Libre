{"ast":null,"code":"export default function memoize(callback) {\n  var previous;\n  var result;\n  return function () {\n    var hasChanged = false;\n    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {\n      dependencies[_key] = arguments[_key];\n    }\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (var i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n    previous = dependencies;\n    if (hasChanged || result === undefined) {\n      result = callback.apply(void 0, dependencies);\n    }\n    return result;\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}