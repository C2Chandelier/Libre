{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport fetchRetry from \"fetch-retry\";\nimport { apiURL } from \"../config\";\nvar fetch = window.fetch;\nvar api = function () {\n  function api() {\n    _classCallCheck(this, api);\n    this.token = \"\";\n  }\n  _createClass(api, [{\n    key: \"goToAuth\",\n    value: function goToAuth(navigation) {\n      var _navigation$route;\n      if ((navigation == null ? void 0 : (_navigation$route = navigation.route) == null ? void 0 : _navigation$route.name) !== \"Auth\") {\n        return navigation.navigate(\"Auth\", {\n          disconnected: 1\n        });\n      }\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return this.token;\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(token) {\n      this.token = token;\n    }\n  }, {\n    key: \"checkToken\",\n    value: function checkToken() {\n      var _this = this;\n      return new Promise(function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            var response = yield fetch(`${apiURL}/user/signin_token`, {\n              retries: 3,\n              retryDelay: 1000,\n              retryOn: [502, 503, 504],\n              mode: \"cors\",\n              method: \"GET\",\n              credentials: \"include\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `JWT ${_this.token}`\n              }\n            });\n            var res = yield response.json();\n            resolve(res);\n          } catch (e) {\n            console.log(e);\n            reject(e);\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"get\",\n    value: function get(path, navigation) {\n      var _this2 = this;\n      return new Promise(function () {\n        var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            var response = yield fetch(`${apiURL}${path}`, {\n              retries: 3,\n              retryDelay: 1000,\n              retryOn: [502, 503, 504],\n              mode: \"cors\",\n              method: \"GET\",\n              credentials: \"include\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `JWT ${_this2.token}`\n              }\n            });\n            if (response.status === 401) {\n              var _navigation$route2;\n              if ((navigation == null ? void 0 : (_navigation$route2 = navigation.route) == null ? void 0 : _navigation$route2.name) !== \"Auth\") {\n                navigation.navigate(\"Auth\", {\n                  disconnected: 1\n                });\n                return;\n              }\n            }\n            var res = yield response.json();\n            resolve(res);\n          } catch (e) {\n            reject(e);\n          }\n        });\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"put\",\n    value: function put(path, body, navigation) {\n      var _this3 = this;\n      return new Promise(function () {\n        var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            var response = yield fetch(`${apiURL}${path}`, {\n              retries: 3,\n              retryDelay: 1000,\n              retryOn: [502, 503, 504],\n              mode: \"cors\",\n              method: \"PUT\",\n              credentials: \"include\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `JWT ${_this3.token}`\n              },\n              body: typeof body === \"string\" ? body : JSON.stringify(body)\n            });\n            if (response.status === 401) {\n              var _navigation$route3;\n              if ((navigation == null ? void 0 : (_navigation$route3 = navigation.route) == null ? void 0 : _navigation$route3.name) !== \"Auth\") {\n                navigation.navigate(\"Auth\", {\n                  disconnected: 1\n                });\n                return;\n              }\n            }\n            var res = yield response.json();\n            resolve(res);\n          } catch (e) {\n            reject(e);\n          }\n        });\n        return function (_x5, _x6) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(path, navigation) {\n      var _this4 = this;\n      return new Promise(function () {\n        var _ref4 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            var response = yield fetch(`${apiURL}${path}`, {\n              retries: 3,\n              retryDelay: 1000,\n              retryOn: [502, 503, 504],\n              mode: \"cors\",\n              credentials: \"include\",\n              method: \"DELETE\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `JWT ${_this4.token}`\n              }\n            });\n            if (response.status === 401) {\n              var _navigation$route4;\n              if ((navigation == null ? void 0 : (_navigation$route4 = navigation.route) == null ? void 0 : _navigation$route4.name) !== \"Auth\") {\n                navigation.navigate(\"Auth\", {\n                  disconnected: 1\n                });\n                return;\n              }\n            }\n            var res = yield response.json();\n            resolve(res);\n          } catch (e) {\n            reject(e);\n          }\n        });\n        return function (_x7, _x8) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"post\",\n    value: function post(path, body, navigation) {\n      var _this5 = this;\n      return new Promise(function () {\n        var _ref5 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            var response = yield fetch(`${apiURL}${path}`, {\n              retries: 3,\n              retryDelay: 1000,\n              retryOn: [502, 503, 504],\n              mode: \"cors\",\n              method: \"POST\",\n              credentials: \"include\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `JWT ${_this5.token}`\n              },\n              body: typeof body === \"string\" ? body : JSON.stringify(body)\n            });\n            if (response.status === 401) {\n              var _navigation$route5;\n              if ((navigation == null ? void 0 : (_navigation$route5 = navigation.route) == null ? void 0 : _navigation$route5.name) !== \"Auth\") {\n                navigation.navigate(\"Auth\", {\n                  disconnected: 1\n                });\n                return;\n              }\n            }\n            var res = yield response.json();\n            if (response.status !== 200) {\n              return reject(res);\n            }\n            resolve(res);\n          } catch (e) {\n            console.log(e, {\n              extra: {\n                path: path,\n                body: body\n              }\n            });\n            reject(e);\n          }\n        });\n        return function (_x9, _x10) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n  return api;\n}();\nfunction initApi() {\n  fetch = fetchRetry(window.fetch);\n}\nvar API = new api();\nexport default API;\nexport { initApi };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}