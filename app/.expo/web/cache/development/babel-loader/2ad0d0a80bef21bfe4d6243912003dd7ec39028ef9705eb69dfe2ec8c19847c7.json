{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedValue from \"../nodes/AnimatedValue\";\nimport AnimatedValueXY from \"../nodes/AnimatedValueXY\";\nimport AnimatedInterpolation from \"../nodes/AnimatedInterpolation\";\nimport Easing from \"../../../../exports/Easing\";\nimport Animation from \"./Animation\";\nimport { shouldUseNativeDriver } from \"../NativeAnimatedHelper\";\nimport AnimatedColor from \"../nodes/AnimatedColor\";\nvar _easeInOut;\nfunction easeInOut() {\n  if (!_easeInOut) {\n    _easeInOut = Easing.inOut(Easing.ease);\n  }\n  return _easeInOut;\n}\nvar TimingAnimation = function (_Animation) {\n  _inherits(TimingAnimation, _Animation);\n  var _super = _createSuper(TimingAnimation);\n  function TimingAnimation(config) {\n    var _this;\n    _classCallCheck(this, TimingAnimation);\n    var _config$easing, _config$duration, _config$delay, _config$iterations, _config$isInteraction;\n    _this = _super.call(this);\n    _this._toValue = config.toValue;\n    _this._easing = (_config$easing = config.easing) !== null && _config$easing !== void 0 ? _config$easing : easeInOut();\n    _this._duration = (_config$duration = config.duration) !== null && _config$duration !== void 0 ? _config$duration : 500;\n    _this._delay = (_config$delay = config.delay) !== null && _config$delay !== void 0 ? _config$delay : 0;\n    _this.__iterations = (_config$iterations = config.iterations) !== null && _config$iterations !== void 0 ? _config$iterations : 1;\n    _this._useNativeDriver = shouldUseNativeDriver(config);\n    _this._platformConfig = config.platformConfig;\n    _this.__isInteraction = (_config$isInteraction = config.isInteraction) !== null && _config$isInteraction !== void 0 ? _config$isInteraction : !_this._useNativeDriver;\n    return _this;\n  }\n  _createClass(TimingAnimation, [{\n    key: \"__getNativeAnimationConfig\",\n    value: function __getNativeAnimationConfig() {\n      var frameDuration = 1000.0 / 60.0;\n      var frames = [];\n      var numFrames = Math.round(this._duration / frameDuration);\n      for (var frame = 0; frame < numFrames; frame++) {\n        frames.push(this._easing(frame / numFrames));\n      }\n      frames.push(this._easing(1));\n      return {\n        type: 'frames',\n        frames: frames,\n        toValue: this._toValue,\n        iterations: this.__iterations,\n        platformConfig: this._platformConfig\n      };\n    }\n  }, {\n    key: \"start\",\n    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n      var _this2 = this;\n      this.__active = true;\n      this._fromValue = fromValue;\n      this._onUpdate = onUpdate;\n      this.__onEnd = onEnd;\n      var start = function start() {\n        if (_this2._duration === 0 && !_this2._useNativeDriver) {\n          _this2._onUpdate(_this2._toValue);\n          _this2.__debouncedOnEnd({\n            finished: true\n          });\n        } else {\n          _this2._startTime = Date.now();\n          if (_this2._useNativeDriver) {\n            _this2.__startNativeAnimation(animatedValue);\n          } else {\n            _this2._animationFrame = requestAnimationFrame(_this2.onUpdate.bind(_this2));\n          }\n        }\n      };\n      if (this._delay) {\n        this._timeout = setTimeout(start, this._delay);\n      } else {\n        start();\n      }\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate() {\n      var now = Date.now();\n      if (now >= this._startTime + this._duration) {\n        if (this._duration === 0) {\n          this._onUpdate(this._toValue);\n        } else {\n          this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));\n        }\n        this.__debouncedOnEnd({\n          finished: true\n        });\n        return;\n      }\n      this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));\n      if (this.__active) {\n        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      _get(_getPrototypeOf(TimingAnimation.prototype), \"stop\", this).call(this);\n      this.__active = false;\n      clearTimeout(this._timeout);\n      global.cancelAnimationFrame(this._animationFrame);\n      this.__debouncedOnEnd({\n        finished: false\n      });\n    }\n  }]);\n  return TimingAnimation;\n}(Animation);\nexport default TimingAnimation;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}