{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"mode\", \"edges\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSafeAreaInsets } from \"./SafeAreaContext\";\nvar TOP = 8,\n  RIGHT = 4,\n  BOTTOM = 2,\n  LEFT = 1,\n  ALL = 15;\nvar edgeBitmaskMap = {\n  top: TOP,\n  right: RIGHT,\n  bottom: BOTTOM,\n  left: LEFT\n};\nexport var SafeAreaView = React.forwardRef(function (_ref, ref) {\n  var _ref$style = _ref.style,\n    style = _ref$style === void 0 ? {} : _ref$style,\n    mode = _ref.mode,\n    edges = _ref.edges,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var insets = useSafeAreaInsets();\n  var edgeBitmask = edges != null ? Array.isArray(edges) ? edges.reduce(function (acc, edge) {\n    return acc | edgeBitmaskMap[edge];\n  }, 0) : Object.keys(edges).reduce(function (acc, edge) {\n    return acc | edgeBitmaskMap[edge];\n  }, 0) : ALL;\n  var appliedStyle = React.useMemo(function () {\n    var insetTop = edgeBitmask & TOP ? insets.top : 0;\n    var insetRight = edgeBitmask & RIGHT ? insets.right : 0;\n    var insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;\n    var insetLeft = edgeBitmask & LEFT ? insets.left : 0;\n    var flatStyle = StyleSheet.flatten(style);\n    if (mode === 'margin') {\n      var _flatStyle$margin = flatStyle.margin,\n        margin = _flatStyle$margin === void 0 ? 0 : _flatStyle$margin,\n        _flatStyle$marginVert = flatStyle.marginVertical,\n        marginVertical = _flatStyle$marginVert === void 0 ? margin : _flatStyle$marginVert,\n        _flatStyle$marginHori = flatStyle.marginHorizontal,\n        marginHorizontal = _flatStyle$marginHori === void 0 ? margin : _flatStyle$marginHori,\n        _flatStyle$marginTop = flatStyle.marginTop,\n        marginTop = _flatStyle$marginTop === void 0 ? marginVertical : _flatStyle$marginTop,\n        _flatStyle$marginRigh = flatStyle.marginRight,\n        marginRight = _flatStyle$marginRigh === void 0 ? marginHorizontal : _flatStyle$marginRigh,\n        _flatStyle$marginBott = flatStyle.marginBottom,\n        marginBottom = _flatStyle$marginBott === void 0 ? marginVertical : _flatStyle$marginBott,\n        _flatStyle$marginLeft = flatStyle.marginLeft,\n        marginLeft = _flatStyle$marginLeft === void 0 ? marginHorizontal : _flatStyle$marginLeft;\n      var marginStyle = {\n        marginTop: marginTop + insetTop,\n        marginRight: marginRight + insetRight,\n        marginBottom: marginBottom + insetBottom,\n        marginLeft: marginLeft + insetLeft\n      };\n      return [style, marginStyle];\n    } else {\n      var _flatStyle$padding = flatStyle.padding,\n        padding = _flatStyle$padding === void 0 ? 0 : _flatStyle$padding,\n        _flatStyle$paddingVer = flatStyle.paddingVertical,\n        paddingVertical = _flatStyle$paddingVer === void 0 ? padding : _flatStyle$paddingVer,\n        _flatStyle$paddingHor = flatStyle.paddingHorizontal,\n        paddingHorizontal = _flatStyle$paddingHor === void 0 ? padding : _flatStyle$paddingHor,\n        _flatStyle$paddingTop = flatStyle.paddingTop,\n        paddingTop = _flatStyle$paddingTop === void 0 ? paddingVertical : _flatStyle$paddingTop,\n        _flatStyle$paddingRig = flatStyle.paddingRight,\n        paddingRight = _flatStyle$paddingRig === void 0 ? paddingHorizontal : _flatStyle$paddingRig,\n        _flatStyle$paddingBot = flatStyle.paddingBottom,\n        paddingBottom = _flatStyle$paddingBot === void 0 ? paddingVertical : _flatStyle$paddingBot,\n        _flatStyle$paddingLef = flatStyle.paddingLeft,\n        paddingLeft = _flatStyle$paddingLef === void 0 ? paddingHorizontal : _flatStyle$paddingLef;\n      var paddingStyle = {\n        paddingTop: paddingTop + insetTop,\n        paddingRight: paddingRight + insetRight,\n        paddingBottom: paddingBottom + insetBottom,\n        paddingLeft: paddingLeft + insetLeft\n      };\n      return [style, paddingStyle];\n    }\n  }, [style, insets, mode, edgeBitmask]);\n  return React.createElement(View, _extends({\n    style: appliedStyle\n  }, rest, {\n    ref: ref\n  }));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}