{"ast":null,"code":"import compareVersions from 'compare-versions';\nimport { CodedError } from \"./errors/CodedError\";\nvar postedWarnings = {};\nexport default function deprecate(library, deprecatedAPI) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var currentVersion = options.currentVersion,\n    versionToRemove = options.versionToRemove,\n    replacement = options.replacement;\n  var code = codeFromLibrary(library);\n  var key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n  if (!currentVersion || !versionToRemove || compareVersions(currentVersion, versionToRemove) >= 0) {\n    var _message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      _message = `${_message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      _message = `${_message} please migrate to: \\`${replacement}\\``;\n    }\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, _message));\n  }\n  var message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\nfunction prependLibrary(library, message) {\n  return `${library}: ${message}`;\n}\nfunction codeFromLibrary(library) {\n  var code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}