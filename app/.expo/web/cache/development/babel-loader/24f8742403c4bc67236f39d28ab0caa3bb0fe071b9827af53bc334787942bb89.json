{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"field\", \"form\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { Field, Formik, Form } from \"formik\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Toast from \"react-native-toast-message\";\nimport validator from \"validator\";\nimport { setUser } from \"../../../redux/Auth/actions\";\nimport api from \"../../../services/api\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Signup() {\n  var dispatch = useDispatch();\n  var navigation = useNavigation();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    newUser = _useState2[0],\n    setNewUser = _useState2[1];\n  var user = useSelector(function (state) {\n    return state.Auth.user;\n  });\n  if (user) return navigation.navigate(\"Home\");\n  var regexPhoneFrenchCountries = /^((00|\\+)(33|590|594|262|596|269|687|689|508|681)|0)[1-9]?(\\d{8})$/;\n  var BirthdateField = function BirthdateField(_ref) {\n    var field = _ref.field,\n      form = _ref.form,\n      props = _objectWithoutProperties(_ref, _excluded);\n    return _jsx(DatePicker, _objectSpread({\n      selected: field.value,\n      onChange: function onChange(date) {\n        return form.setFieldValue(field.name, date);\n      }\n    }, props));\n  };\n  return _jsxs(\"div\", {\n    children: [newUser ? _jsxs(Modal, {\n      visible: newUser,\n      transparent: true,\n      animationType: \"slide\",\n      children: [_jsx(Text, {\n        children: \"Utilisateur et structure cr\\xE9\\xE9s avec succ\\xE8s.\"\n      }), _jsx(Button, {\n        title: \"Continuer\",\n        onPress: function onPress() {\n          return dispatch(setUser(newUser));\n        }\n      })]\n    }) : null, _jsx(Formik, {\n      validateOnChange: false,\n      validateOnBlur: false,\n      initialValues: {\n        user: {}\n      },\n      onSubmit: function () {\n        var _ref2 = _asyncToGenerator(function* (values, actions) {\n          try {\n            var _ref3 = (values == null ? void 0 : values.user) || {},\n              firstName = _ref3.firstName,\n              lastName = _ref3.lastName,\n              email = _ref3.email,\n              password = _ref3.password,\n              phone = _ref3.phone,\n              birthdateAt = _ref3.birthdateAt;\n            var _yield$api$post = yield api.post(`/user/signup`, {\n                firstName: firstName,\n                lastName: lastName,\n                email: email,\n                password: password,\n                phone: phone,\n                birthdateAt: birthdateAt\n              }),\n              _user = _yield$api$post.user,\n              token = _yield$api$post.token,\n              code = _yield$api$post.code,\n              ok = _yield$api$post.ok;\n            if (!ok) {\n              if (code === \"PASSWORD_NOT_VALIDATED\") {\n                Toast.show({\n                  type: \"error\",\n                  text1: \"Mot de passe incorrect\",\n                  text2: \"Votre mot de passe doit contenir au moins 12 caractères, dont une majuscule, une minuscule, un chiffre et un symbole\",\n                  duration: 10000\n                });\n              }\n              if (code === \"USER_ALREADY_REGISTERED\") {\n                Toast.show({\n                  type: \"error\",\n                  text1: \"Votre compte est déja activé. Veuillez vous connecter\",\n                  duration: 10000\n                });\n              }\n              Toast.show({\n                type: \"error\",\n                text1: `Oups, une erreur est survenue ${code}`,\n                duration: 3000\n              });\n            }\n            dispatch(setUser(_user));\n            setNewUser(_user);\n          } catch (e) {\n            if (e && e.code === \"USER_ALREADY_REGISTERED\") {\n              Toast.show({\n                type: \"error\",\n                text1: \"Le compte existe déja. Veuillez vous connecter\",\n                duration: 2000\n              });\n            }\n            Toast.show({\n              type: \"error\",\n              text1: `Oups, une erreur est survenue ${e == null ? void 0 : e.code}`\n            });\n            actions.setSubmitting(false);\n            console.log(\"e\", e);\n          }\n        });\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref4) {\n        var _errors$user, _errors$user2, _errors$user3, _errors$user4, _errors$user5, _errors$user6, _errors$user7;\n        var values = _ref4.values,\n          errors = _ref4.errors,\n          handleChange = _ref4.handleChange,\n          handleSubmit = _ref4.handleSubmit;\n        return _jsxs(\"div\", {\n          children: [_jsxs(\"div\", {\n            children: [\"Vous avez d\\xE9j\\xE0 un compte ? \", _jsx(Button, {\n              title: \"Se Connecter\",\n              onPress: function onPress() {\n                return navigation.navigate(\"Signin\");\n              }\n            })]\n          }), _jsx(\"div\", {\n            children: _jsxs(Form, {\n              onSubmit: handleSubmit,\n              children: [_jsxs(\"div\", {\n                children: [_jsxs(\"label\", {\n                  children: [_jsx(\"span\", {\n                    children: \"*\"\n                  }), \"ADRESSE EMAIL\"]\n                }), _jsx(Field, {\n                  validate: function validate(v) {\n                    return !v && \"Ce champ est obligatoire\" || !validator.isEmail(v) && \"Veuillez renseigner votre email\";\n                  },\n                  name: \"user.email\",\n                  type: \"email\",\n                  value: values.user.email || \"\",\n                  onChange: handleChange,\n                  placeholder: \"Email\"\n                }), _jsx(\"p\", {\n                  children: (_errors$user = errors.user) == null ? void 0 : _errors$user.email\n                })]\n              }), _jsxs(\"div\", {\n                children: [_jsxs(\"div\", {\n                  children: [_jsxs(\"label\", {\n                    htmlFor: \"firstName\",\n                    children: [_jsx(\"span\", {\n                      children: \"*\"\n                    }), \"Pr\\xE9nom\"]\n                  }), _jsx(Field, {\n                    validate: function validate(v) {\n                      return !v && \"Ce champ est obligatoire\";\n                    },\n                    name: \"user.firstName\",\n                    id: \"firstName\",\n                    value: values.user.firstName || \"\",\n                    onChange: handleChange,\n                    placeholder: \"Pr\\xE9nom\"\n                  }), _jsx(\"p\", {\n                    children: (_errors$user2 = errors.user) == null ? void 0 : _errors$user2.firstName\n                  })]\n                }), _jsxs(\"div\", {\n                  children: [_jsxs(\"label\", {\n                    htmlFor: \"lastName\",\n                    children: [_jsx(\"span\", {\n                      children: \"*\"\n                    }), \"Nom\"]\n                  }), _jsx(Field, {\n                    validate: function validate(v) {\n                      return !v && \"Ce champ est obligatoire\";\n                    },\n                    name: \"user.lastName\",\n                    id: \"lastName\",\n                    value: values.user.lastName || \"\",\n                    onChange: handleChange,\n                    placeholder: \"Nom\"\n                  }), _jsx(\"p\", {\n                    children: (_errors$user3 = errors.user) == null ? void 0 : _errors$user3.lastName\n                  })]\n                })]\n              }), _jsxs(\"div\", {\n                children: [_jsxs(\"label\", {\n                  children: [_jsx(\"span\", {\n                    children: \"*\"\n                  }), \"Date de naissance\"]\n                }), _jsx(Field, {\n                  name: \"user.birthdateAt\",\n                  component: BirthdateField,\n                  handleChange: handleChange,\n                  dateFormat: \"dd/MM/yyyy\",\n                  showYearDropdown: true,\n                  dropdownMode: \"select\",\n                  placeholderText: \"S\\xE9lectionnez une date\",\n                  selected: values.user.birthdateAt\n                }), _jsx(\"p\", {\n                  children: (_errors$user4 = errors.user) == null ? void 0 : _errors$user4.birthdateAt\n                })]\n              }), _jsxs(\"div\", {\n                children: [_jsxs(\"label\", {\n                  htmlFor: \"phone\",\n                  children: [_jsx(\"span\", {\n                    children: \"*\"\n                  }), \"T\\xE9l\\xE9phone\"]\n                }), _jsx(Field, {\n                  name: \"user.phone\",\n                  type: \"tel\",\n                  id: \"phone\",\n                  value: values.user.phone || \"\",\n                  onChange: handleChange,\n                  placeholder: \"06 00 00 00 00\",\n                  validate: function validate(v) {\n                    return !validator.matches(v, regexPhoneFrenchCountries) && \"Le numéro de téléphone est au mauvais format. Format attendu : 06XXXXXXXX ou +33XXXXXXXX\";\n                  }\n                }), _jsx(\"p\", {\n                  children: (_errors$user5 = errors.user) == null ? void 0 : _errors$user5.phone\n                })]\n              }), _jsxs(\"div\", {\n                children: [_jsxs(\"label\", {\n                  children: [_jsx(\"span\", {\n                    children: \"*\"\n                  }), \"Mot de passe\"]\n                }), _jsx(\"p\", {\n                  children: \"\\uD83D\\uDC49 Il doit contenir au moins 12 caract\\xE8res, dont une majuscule, une minuscule, un chiffre et un symbole\"\n                }), _jsx(Field, {\n                  type: \"password\",\n                  id: \"signup_password\",\n                  value: values.user.password || \"\",\n                  onChange: handleChange,\n                  name: \"user.password\",\n                  placeholder: \"Mot de passe\"\n                }), _jsx(\"p\", {\n                  children: (_errors$user6 = errors.user) == null ? void 0 : _errors$user6.password\n                })]\n              }), _jsxs(\"div\", {\n                children: [_jsxs(\"label\", {\n                  children: [_jsx(\"span\", {\n                    children: \"*\"\n                  }), \"Confirmation mot de passe\"]\n                }), _jsx(Field, {\n                  validate: function validate() {\n                    return values.user.password !== values.user.repassword && \"Les mots de passe ne correspondent pas.\";\n                  },\n                  type: \"password\",\n                  id: \"repassword\",\n                  value: values.user.repassword || \"\",\n                  onChange: handleChange,\n                  name: \"user.repassword\",\n                  placeholder: \"Confirmez votre mot de passe\"\n                }), _jsx(\"p\", {\n                  children: (_errors$user7 = errors.user) == null ? void 0 : _errors$user7.repassword\n                })]\n              }), _jsx(\"button\", {\n                type: \"submit\",\n                children: \"S'inscrire\"\n              })]\n            })\n          })]\n        });\n      }\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}