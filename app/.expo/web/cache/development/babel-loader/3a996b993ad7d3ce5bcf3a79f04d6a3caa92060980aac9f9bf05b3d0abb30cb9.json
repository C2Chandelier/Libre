{"ast":null,"code":"import React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { additiveInverseArray } from \"../utils/array\";\nimport { useKeyboard } from \"./useKeyboard\";\nexport function translateYOutputRangeFor(_ref) {\n  var position = _ref.position,\n    height = _ref.height,\n    topOffset = _ref.topOffset,\n    bottomOffset = _ref.bottomOffset,\n    keyboardHeight = _ref.keyboardHeight,\n    keyboardOffset = _ref.keyboardOffset;\n  var offset = position === 'bottom' ? bottomOffset : topOffset;\n  var keyboardAwareOffset = position === 'bottom' ? keyboardHeight + keyboardOffset : 0;\n  var range = [-(height * 2), Math.max(offset, keyboardAwareOffset)];\n  var outputRange = position === 'bottom' ? additiveInverseArray(range) : range;\n  return outputRange;\n}\nvar useNativeDriver = Platform.select({\n  native: true,\n  default: false\n});\nexport function useSlideAnimation(_ref2) {\n  var position = _ref2.position,\n    height = _ref2.height,\n    topOffset = _ref2.topOffset,\n    bottomOffset = _ref2.bottomOffset,\n    keyboardOffset = _ref2.keyboardOffset;\n  var animatedValue = React.useRef(new Animated.Value(0));\n  var _useKeyboard = useKeyboard(),\n    keyboardHeight = _useKeyboard.keyboardHeight;\n  var animate = React.useCallback(function (toValue) {\n    Animated.spring(animatedValue.current, {\n      toValue: toValue,\n      useNativeDriver: useNativeDriver,\n      friction: 8\n    }).start();\n  }, []);\n  var translateY = React.useMemo(function () {\n    return animatedValue.current.interpolate({\n      inputRange: [0, 1],\n      outputRange: translateYOutputRangeFor({\n        position: position,\n        height: height,\n        topOffset: topOffset,\n        bottomOffset: bottomOffset,\n        keyboardHeight: keyboardHeight,\n        keyboardOffset: keyboardOffset\n      })\n    });\n  }, [position, height, topOffset, bottomOffset, keyboardHeight, keyboardOffset]);\n  var opacity = animatedValue.current.interpolate({\n    inputRange: [0, 0.7, 1],\n    outputRange: [0, 1, 1]\n  });\n  return {\n    animatedValue: animatedValue,\n    animate: animate,\n    animationStyles: {\n      opacity: opacity,\n      transform: [{\n        translateY: translateY\n      }]\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}