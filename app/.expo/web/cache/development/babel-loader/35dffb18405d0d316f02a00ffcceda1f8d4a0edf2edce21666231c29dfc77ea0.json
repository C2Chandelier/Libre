{"ast":null,"code":"import React from 'react';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nexport function shouldSetPanResponder(_event, gesture) {\n  var dx = gesture.dx,\n    dy = gesture.dy;\n  var offset = 2;\n  return Math.abs(dx) > offset || Math.abs(dy) > offset;\n}\nexport function shouldDismissView(newAnimatedValue, gesture) {\n  var dismissThreshold = 0.65;\n  var vy = gesture.vy,\n    dy = gesture.dy;\n  return newAnimatedValue <= dismissThreshold || Math.abs(vy) >= dismissThreshold && dy < 0;\n}\nexport function usePanResponder(_ref) {\n  var animatedValue = _ref.animatedValue,\n    computeNewAnimatedValueForGesture = _ref.computeNewAnimatedValueForGesture,\n    onDismiss = _ref.onDismiss,\n    onRestore = _ref.onRestore;\n  var onMove = React.useCallback(function (_event, gesture) {\n    var _animatedValue$curren;\n    var newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n    (_animatedValue$curren = animatedValue.current) == null ? void 0 : _animatedValue$curren.setValue(newAnimatedValue);\n  }, [animatedValue, computeNewAnimatedValueForGesture]);\n  var onRelease = React.useCallback(function (_event, gesture) {\n    var newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n    if (shouldDismissView(newAnimatedValue, gesture)) {\n      onDismiss();\n    } else {\n      onRestore();\n    }\n  }, [computeNewAnimatedValueForGesture, onDismiss, onRestore]);\n  var panResponder = React.useMemo(function () {\n    return PanResponder.create({\n      onMoveShouldSetPanResponder: shouldSetPanResponder,\n      onMoveShouldSetPanResponderCapture: shouldSetPanResponder,\n      onPanResponderMove: onMove,\n      onPanResponderRelease: onRelease\n    });\n  }, [onMove, onRelease]);\n  return {\n    panResponder: panResponder,\n    onMove: onMove,\n    onRelease: onRelease\n  };\n}","map":{"version":3,"names":["React","PanResponder","shouldSetPanResponder","_event","gesture","dx","dy","offset","Math","abs","shouldDismissView","newAnimatedValue","dismissThreshold","vy","usePanResponder","_ref","animatedValue","computeNewAnimatedValueForGesture","onDismiss","onRestore","onMove","useCallback","_animatedValue$curren","current","setValue","onRelease","panResponder","useMemo","create","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","onPanResponderRelease"],"sources":["/Users/charlelie/projects/new/app/node_modules/react-native-toast-message/lib/src/hooks/usePanResponder.js"],"sourcesContent":["import React from 'react';\nimport { PanResponder } from 'react-native';\nexport function shouldSetPanResponder(_event, gesture) {\n    const { dx, dy } = gesture;\n    // Fixes onPress handler\n    // https://github.com/calintamas/react-native-toast-message/issues/113\n    const offset = 2;\n    return Math.abs(dx) > offset || Math.abs(dy) > offset;\n}\nexport function shouldDismissView(newAnimatedValue, gesture) {\n    const dismissThreshold = 0.65;\n    const { vy, dy } = gesture;\n    return (newAnimatedValue <= dismissThreshold ||\n        (Math.abs(vy) >= dismissThreshold && dy < 0));\n}\nexport function usePanResponder({ animatedValue, computeNewAnimatedValueForGesture, onDismiss, onRestore }) {\n    const onMove = React.useCallback((_event, gesture) => {\n        const newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n        animatedValue.current?.setValue(newAnimatedValue);\n    }, [animatedValue, computeNewAnimatedValueForGesture]);\n    const onRelease = React.useCallback((_event, gesture) => {\n        const newAnimatedValue = computeNewAnimatedValueForGesture(gesture);\n        if (shouldDismissView(newAnimatedValue, gesture)) {\n            onDismiss();\n        }\n        else {\n            onRestore();\n        }\n    }, [computeNewAnimatedValueForGesture, onDismiss, onRestore]);\n    const panResponder = React.useMemo(() => PanResponder.create({\n        onMoveShouldSetPanResponder: shouldSetPanResponder,\n        onMoveShouldSetPanResponderCapture: shouldSetPanResponder,\n        onPanResponderMove: onMove,\n        onPanResponderRelease: onRelease\n    }), [onMove, onRelease]);\n    return {\n        panResponder,\n        onMove,\n        onRelease\n    };\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,YAAA;AAE1B,OAAO,SAASC,qBAAqBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACnD,IAAQC,EAAE,GAASD,OAAO,CAAlBC,EAAE;IAAEC,EAAE,GAAKF,OAAO,CAAdE,EAAE;EAGd,IAAMC,MAAM,GAAG,CAAC;EAChB,OAAOC,IAAI,CAACC,GAAG,CAACJ,EAAE,CAAC,GAAGE,MAAM,IAAIC,IAAI,CAACC,GAAG,CAACH,EAAE,CAAC,GAAGC,MAAM;AACzD;AACA,OAAO,SAASG,iBAAiBA,CAACC,gBAAgB,EAAEP,OAAO,EAAE;EACzD,IAAMQ,gBAAgB,GAAG,IAAI;EAC7B,IAAQC,EAAE,GAAST,OAAO,CAAlBS,EAAE;IAAEP,EAAE,GAAKF,OAAO,CAAdE,EAAE;EACd,OAAQK,gBAAgB,IAAIC,gBAAgB,IACvCJ,IAAI,CAACC,GAAG,CAACI,EAAE,CAAC,IAAID,gBAAgB,IAAIN,EAAE,GAAG,CAAE;AACpD;AACA,OAAO,SAASQ,eAAeA,CAAAC,IAAA,EAA6E;EAAA,IAA1EC,aAAa,GAAAD,IAAA,CAAbC,aAAa;IAAEC,iCAAiC,GAAAF,IAAA,CAAjCE,iCAAiC;IAAEC,SAAS,GAAAH,IAAA,CAATG,SAAS;IAAEC,SAAS,GAAAJ,IAAA,CAATI,SAAS;EACpG,IAAMC,MAAM,GAAGpB,KAAK,CAACqB,WAAW,CAAC,UAAClB,MAAM,EAAEC,OAAO,EAAK;IAAA,IAAAkB,qBAAA;IAClD,IAAMX,gBAAgB,GAAGM,iCAAiC,CAACb,OAAO,CAAC;IACnE,CAAAkB,qBAAA,GAAAN,aAAa,CAACO,OAAO,qBAArBD,qBAAA,CAAuBE,QAAQ,CAACb,gBAAgB,CAAC;EACrD,CAAC,EAAE,CAACK,aAAa,EAAEC,iCAAiC,CAAC,CAAC;EACtD,IAAMQ,SAAS,GAAGzB,KAAK,CAACqB,WAAW,CAAC,UAAClB,MAAM,EAAEC,OAAO,EAAK;IACrD,IAAMO,gBAAgB,GAAGM,iCAAiC,CAACb,OAAO,CAAC;IACnE,IAAIM,iBAAiB,CAACC,gBAAgB,EAAEP,OAAO,CAAC,EAAE;MAC9Cc,SAAS,CAAC,CAAC;IACf,CAAC,MACI;MACDC,SAAS,CAAC,CAAC;IACf;EACJ,CAAC,EAAE,CAACF,iCAAiC,EAAEC,SAAS,EAAEC,SAAS,CAAC,CAAC;EAC7D,IAAMO,YAAY,GAAG1B,KAAK,CAAC2B,OAAO,CAAC;IAAA,OAAM1B,YAAY,CAAC2B,MAAM,CAAC;MACzDC,2BAA2B,EAAE3B,qBAAqB;MAClD4B,kCAAkC,EAAE5B,qBAAqB;MACzD6B,kBAAkB,EAAEX,MAAM;MAC1BY,qBAAqB,EAAEP;IAC3B,CAAC,CAAC;EAAA,GAAE,CAACL,MAAM,EAAEK,SAAS,CAAC,CAAC;EACxB,OAAO;IACHC,YAAY,EAAZA,YAAY;IACZN,MAAM,EAANA,MAAM;IACNK,SAAS,EAATA;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}