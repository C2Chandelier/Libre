{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedInterpolation from \"./AnimatedInterpolation\";\nimport AnimatedValue from \"./AnimatedValue\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nvar AnimatedSubtraction = function (_AnimatedWithChildren) {\n  _inherits(AnimatedSubtraction, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedSubtraction);\n  function AnimatedSubtraction(a, b) {\n    var _this;\n    _classCallCheck(this, AnimatedSubtraction);\n    _this = _super.call(this);\n    _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;\n    _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;\n    return _this;\n  }\n  _createClass(AnimatedSubtraction, [{\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      this._a.__makeNative(platformConfig);\n      this._b.__makeNative(platformConfig);\n      _get(_getPrototypeOf(AnimatedSubtraction.prototype), \"__makeNative\", this).call(this, platformConfig);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      return this._a.__getValue() - this._b.__getValue();\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._a.__addChild(this);\n      this._b.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._a.__removeChild(this);\n      this._b.__removeChild(this);\n      _get(_getPrototypeOf(AnimatedSubtraction.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      return {\n        type: 'subtraction',\n        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]\n      };\n    }\n  }]);\n  return AnimatedSubtraction;\n}(AnimatedWithChildren);\nexport default AnimatedSubtraction;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}