{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"styleInterpolator\", \"interpolationIndex\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"headerDarkContent\", \"children\", \"containerStyle\", \"contentStyle\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forModalPresentationIOS } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nimport { GestureState, PanGestureHandler } from \"../GestureHandler\";\nimport ModalStatusBarManager from \"../ModalStatusBarManager\";\nimport CardSheet from \"./CardSheet\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = Platform.OS !== 'web';\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n  var _super = _createSuper(Card);\n  function Card() {\n    var _this;\n    _classCallCheck(this, Card);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isCurrentlyMounted = false;\n    _this.isClosing = new Animated.Value(FALSE);\n    _this.inverted = new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection));\n    _this.layout = {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    };\n    _this.isSwiping = new Animated.Value(FALSE);\n    _this.animate = function (_ref2) {\n      var closing = _ref2.closing,\n        velocity = _ref2.velocity;\n      var _this$props = _this.props,\n        gesture = _this$props.gesture,\n        transitionSpec = _this$props.transitionSpec,\n        onOpen = _this$props.onOpen,\n        onClose = _this$props.onClose,\n        onTransition = _this$props.onTransition;\n      var toValue = _this.getAnimateToValue(_objectSpread(_objectSpread({}, _this.props), {}, {\n        closing: closing\n      }));\n      _this.lastToValue = toValue;\n      _this.isClosing.setValue(closing ? TRUE : FALSE);\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      _this.setPointerEventsEnabled(!closing);\n      _this.handleStartInteraction();\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref3) {\n        var finished = _ref3.finished;\n        _this.handleEndInteraction();\n        clearTimeout(_this.pendingGestureCallback);\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    };\n    _this.getAnimateToValue = function (_ref4) {\n      var closing = _ref4.closing,\n        layout = _ref4.layout,\n        gestureDirection = _ref4.gestureDirection;\n      if (!closing) {\n        return 0;\n      }\n      return getDistanceForDirection(layout, gestureDirection);\n    };\n    _this.setPointerEventsEnabled = function (enabled) {\n      var _this$ref$current;\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$ref$current = _this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.setPointerEvents(pointerEvents);\n    };\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n    _this.handleGestureStateChange = function (_ref5) {\n      var nativeEvent = _ref5.nativeEvent;\n      var _this$props2 = _this.props,\n        layout = _this$props2.layout,\n        onClose = _this$props2.onClose,\n        onGestureBegin = _this$props2.onGestureBegin,\n        onGestureCanceled = _this$props2.onGestureCanceled,\n        onGestureEnd = _this$props2.onGestureEnd,\n        gestureDirection = _this$props2.gestureDirection,\n        gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n      switch (nativeEvent.state) {\n        case GestureState.ACTIVE:\n          _this.isSwiping.setValue(TRUE);\n          _this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n        case GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n            _this.handleEndInteraction();\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n            var distance;\n            var translation;\n            var _velocity;\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n            var closing = (translation + _velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n                _this.forceUpdate();\n              }, 32);\n            }\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    };\n    _this.getInterpolatedStyle = memoize(function (styleInterpolator, animation) {\n      return styleInterpolator(animation);\n    });\n    _this.getCardAnimation = memoize(function (interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: interpolationIndex,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    });\n    _this.ref = React.createRef();\n    return _this;\n  }\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        layout = _this$props3.layout,\n        gestureDirection = _this$props3.gestureDirection,\n        closing = _this$props3.closing;\n      var width = layout.width,\n        height = layout.height;\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n      var toValue = this.getAnimateToValue(this.props);\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.gesture.stopAnimation();\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n        layout = _this$props4.layout,\n        gestureDirection = _this$props4.gestureDirection,\n        gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var enableTrackpadTwoFingerGesture = true;\n      var distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            },\n            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            },\n            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        styleInterpolator = _this$props5.styleInterpolator,\n        interpolationIndex = _this$props5.interpolationIndex,\n        current = _this$props5.current,\n        gesture = _this$props5.gesture,\n        next = _this$props5.next,\n        layout = _this$props5.layout,\n        insets = _this$props5.insets,\n        overlay = _this$props5.overlay,\n        overlayEnabled = _this$props5.overlayEnabled,\n        shadowEnabled = _this$props5.shadowEnabled,\n        gestureEnabled = _this$props5.gestureEnabled,\n        gestureDirection = _this$props5.gestureDirection,\n        pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n        headerDarkContent = _this$props5.headerDarkContent,\n        children = _this$props5.children,\n        customContainerStyle = _this$props5.containerStyle,\n        contentStyle = _this$props5.contentStyle,\n        rest = _objectWithoutProperties(_this$props5, _excluded);\n      var interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n      var containerStyle = interpolatedStyle.containerStyle,\n        cardStyle = interpolatedStyle.cardStyle,\n        overlayStyle = interpolatedStyle.overlayStyle,\n        shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n        backgroundColor = _StyleSheet$flatten.backgroundColor;\n      var isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(CardAnimationContext.Provider, {\n        value: interpolationProps\n      }, Platform.OS === 'ios' && overlayEnabled && next && getIsModalPresentation(styleInterpolator) ? React.createElement(ModalStatusBarManager, {\n        dark: headerDarkContent,\n        layout: layout,\n        insets: insets,\n        style: cardStyle\n      }) : null, React.createElement(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(Animated.View, {\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(CardSheet, {\n        ref: this.ref,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n  return Card;\n}(React.Component);\nCard.defaultProps = {\n  shadowEnabled: false,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref) {\n    var style = _ref.style;\n    return style ? React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n};\nexport { Card as default };\nexport var getIsModalPresentation = function getIsModalPresentation(cardStyleInterpolator) {\n  return cardStyleInterpolator === forModalPresentationIOS || cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}