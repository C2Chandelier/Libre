{"ast":null,"code":"import * as React from 'react';\nimport View from \"../View\";\nimport createElement from \"../createElement\";\nimport StyleSheet from \"../StyleSheet\";\nimport UIManager from \"../UIManager\";\nimport canUseDOM from \"../../modules/canUseDom\";\nvar FocusBracket = function FocusBracket() {\n  return createElement('div', {\n    role: 'none',\n    tabIndex: 0,\n    style: styles.focusBracket\n  });\n};\nfunction attemptFocus(element) {\n  if (!canUseDOM) {\n    return false;\n  }\n  try {\n    element.focus();\n  } catch (e) {}\n  return document.activeElement === element;\n}\nfunction focusFirstDescendant(element) {\n  for (var i = 0; i < element.childNodes.length; i++) {\n    var child = element.childNodes[i];\n    if (attemptFocus(child) || focusFirstDescendant(child)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction focusLastDescendant(element) {\n  for (var i = element.childNodes.length - 1; i >= 0; i--) {\n    var child = element.childNodes[i];\n    if (attemptFocus(child) || focusLastDescendant(child)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar ModalFocusTrap = function ModalFocusTrap(_ref) {\n  var active = _ref.active,\n    children = _ref.children;\n  var trapElementRef = React.useRef();\n  var focusRef = React.useRef({\n    trapFocusInProgress: false,\n    lastFocusedElement: null\n  });\n  React.useEffect(function () {\n    if (canUseDOM) {\n      var trapFocus = function trapFocus() {\n        if (trapElementRef.current == null || focusRef.current.trapFocusInProgress || !active) {\n          return;\n        }\n        try {\n          focusRef.current.trapFocusInProgress = true;\n          if (document.activeElement instanceof Node && !trapElementRef.current.contains(document.activeElement)) {\n            var hasFocused = focusFirstDescendant(trapElementRef.current);\n            if (focusRef.current.lastFocusedElement === document.activeElement) {\n              hasFocused = focusLastDescendant(trapElementRef.current);\n            }\n            if (!hasFocused && trapElementRef.current != null && document.activeElement) {\n              UIManager.focus(trapElementRef.current);\n            }\n          }\n        } finally {\n          focusRef.current.trapFocusInProgress = false;\n        }\n        focusRef.current.lastFocusedElement = document.activeElement;\n      };\n      trapFocus();\n      document.addEventListener('focus', trapFocus, true);\n      return function () {\n        return document.removeEventListener('focus', trapFocus, true);\n      };\n    }\n  }, [active]);\n  React.useEffect(function () {\n    if (canUseDOM) {\n      var lastFocusedElementOutsideTrap = document.activeElement;\n      return function () {\n        if (lastFocusedElementOutsideTrap && document.contains(lastFocusedElementOutsideTrap)) {\n          UIManager.focus(lastFocusedElementOutsideTrap);\n        }\n      };\n    }\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(FocusBracket, null), React.createElement(View, {\n    ref: trapElementRef\n  }, children), React.createElement(FocusBracket, null));\n};\nexport default ModalFocusTrap;\nvar styles = StyleSheet.create({\n  focusBracket: {\n    outlineStyle: 'none'\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}