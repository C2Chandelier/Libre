{"ast":null,"code":"'use strict';\n\nfunction normalizeColor(color) {\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n    return null;\n  }\n  if (typeof color !== 'string') {\n    return null;\n  }\n  var matchers = getMatchers();\n  var match;\n  if (match = matchers.hex6.exec(color)) {\n    return parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n  var colorFromKeyword = normalizeKeyword(color);\n  if (colorFromKeyword != null) {\n    return colorFromKeyword;\n  }\n  if (match = matchers.rgb.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;\n  }\n  if (match = matchers.rgba.exec(color)) {\n    if (match[6] !== undefined) {\n      return (parse255(match[6]) << 24 | parse255(match[7]) << 16 | parse255(match[8]) << 8 | parse1(match[9])) >>> 0;\n    }\n    return (parse255(match[2]) << 24 | parse255(match[3]) << 16 | parse255(match[4]) << 8 | parse1(match[5])) >>> 0;\n  }\n  if (match = matchers.hex3.exec(color)) {\n    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;\n  }\n  if (match = matchers.hex8.exec(color)) {\n    return parseInt(match[1], 16) >>> 0;\n  }\n  if (match = matchers.hex4.exec(color)) {\n    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;\n  }\n  if (match = matchers.hsl.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;\n  }\n  if (match = matchers.hsla.exec(color)) {\n    if (match[6] !== undefined) {\n      return (hslToRgb(parse360(match[6]), parsePercentage(match[7]), parsePercentage(match[8])) | parse1(match[9])) >>> 0;\n    }\n    return (hslToRgb(parse360(match[2]), parsePercentage(match[3]), parsePercentage(match[4])) | parse1(match[5])) >>> 0;\n  }\n  if (match = matchers.hwb.exec(color)) {\n    return (hwbToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;\n  }\n  return null;\n}\nfunction hue2rgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\nfunction hslToRgb(h, s, l) {\n  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  var p = 2 * l - q;\n  var r = hue2rgb(p, q, h + 1 / 3);\n  var g = hue2rgb(p, q, h);\n  var b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\nfunction hwbToRgb(h, w, b) {\n  if (w + b >= 1) {\n    var gray = Math.round(w * 255 / (w + b));\n    return gray << 24 | gray << 16 | gray << 8;\n  }\n  var red = hue2rgb(0, 1, h + 1 / 3) * (1 - w - b) + w;\n  var green = hue2rgb(0, 1, h) * (1 - w - b) + w;\n  var blue = hue2rgb(0, 1, h - 1 / 3) * (1 - w - b) + w;\n  return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;\n}\nvar NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nvar PERCENTAGE = NUMBER + '%';\nfunction call() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,?\\\\s*(') + ')\\\\s*\\\\)';\n}\nfunction callWithSlashSeparator() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return '\\\\(\\\\s*(' + args.slice(0, args.length - 1).join(')\\\\s*,?\\\\s*(') + ')\\\\s*/\\\\s*(' + args[args.length - 1] + ')\\\\s*\\\\)';\n}\nfunction commaSeparatedCall() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\nvar cachedMatchers;\nfunction getMatchers() {\n  if (cachedMatchers === undefined) {\n    cachedMatchers = {\n      rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),\n      rgba: new RegExp('rgba(' + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + '|' + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ')'),\n      hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),\n      hsla: new RegExp('hsla(' + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + '|' + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ')'),\n      hwb: new RegExp('hwb' + call(NUMBER, PERCENTAGE, PERCENTAGE)),\n      hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#([0-9a-fA-F]{6})$/,\n      hex8: /^#([0-9a-fA-F]{8})$/\n    };\n  }\n  return cachedMatchers;\n}\nfunction parse255(str) {\n  var int = parseInt(str, 10);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 255) {\n    return 255;\n  }\n  return int;\n}\nfunction parse360(str) {\n  var int = parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\nfunction parse1(str) {\n  var num = parseFloat(str);\n  if (num < 0) {\n    return 0;\n  }\n  if (num > 1) {\n    return 255;\n  }\n  return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n  var int = parseFloat(str);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 100) {\n    return 1;\n  }\n  return int / 100;\n}\nfunction normalizeKeyword(name) {\n  switch (name) {\n    case 'transparent':\n      return 0x00000000;\n    case 'aliceblue':\n      return 0xf0f8ffff;\n    case 'antiquewhite':\n      return 0xfaebd7ff;\n    case 'aqua':\n      return 0x00ffffff;\n    case 'aquamarine':\n      return 0x7fffd4ff;\n    case 'azure':\n      return 0xf0ffffff;\n    case 'beige':\n      return 0xf5f5dcff;\n    case 'bisque':\n      return 0xffe4c4ff;\n    case 'black':\n      return 0x000000ff;\n    case 'blanchedalmond':\n      return 0xffebcdff;\n    case 'blue':\n      return 0x0000ffff;\n    case 'blueviolet':\n      return 0x8a2be2ff;\n    case 'brown':\n      return 0xa52a2aff;\n    case 'burlywood':\n      return 0xdeb887ff;\n    case 'burntsienna':\n      return 0xea7e5dff;\n    case 'cadetblue':\n      return 0x5f9ea0ff;\n    case 'chartreuse':\n      return 0x7fff00ff;\n    case 'chocolate':\n      return 0xd2691eff;\n    case 'coral':\n      return 0xff7f50ff;\n    case 'cornflowerblue':\n      return 0x6495edff;\n    case 'cornsilk':\n      return 0xfff8dcff;\n    case 'crimson':\n      return 0xdc143cff;\n    case 'cyan':\n      return 0x00ffffff;\n    case 'darkblue':\n      return 0x00008bff;\n    case 'darkcyan':\n      return 0x008b8bff;\n    case 'darkgoldenrod':\n      return 0xb8860bff;\n    case 'darkgray':\n      return 0xa9a9a9ff;\n    case 'darkgreen':\n      return 0x006400ff;\n    case 'darkgrey':\n      return 0xa9a9a9ff;\n    case 'darkkhaki':\n      return 0xbdb76bff;\n    case 'darkmagenta':\n      return 0x8b008bff;\n    case 'darkolivegreen':\n      return 0x556b2fff;\n    case 'darkorange':\n      return 0xff8c00ff;\n    case 'darkorchid':\n      return 0x9932ccff;\n    case 'darkred':\n      return 0x8b0000ff;\n    case 'darksalmon':\n      return 0xe9967aff;\n    case 'darkseagreen':\n      return 0x8fbc8fff;\n    case 'darkslateblue':\n      return 0x483d8bff;\n    case 'darkslategray':\n      return 0x2f4f4fff;\n    case 'darkslategrey':\n      return 0x2f4f4fff;\n    case 'darkturquoise':\n      return 0x00ced1ff;\n    case 'darkviolet':\n      return 0x9400d3ff;\n    case 'deeppink':\n      return 0xff1493ff;\n    case 'deepskyblue':\n      return 0x00bfffff;\n    case 'dimgray':\n      return 0x696969ff;\n    case 'dimgrey':\n      return 0x696969ff;\n    case 'dodgerblue':\n      return 0x1e90ffff;\n    case 'firebrick':\n      return 0xb22222ff;\n    case 'floralwhite':\n      return 0xfffaf0ff;\n    case 'forestgreen':\n      return 0x228b22ff;\n    case 'fuchsia':\n      return 0xff00ffff;\n    case 'gainsboro':\n      return 0xdcdcdcff;\n    case 'ghostwhite':\n      return 0xf8f8ffff;\n    case 'gold':\n      return 0xffd700ff;\n    case 'goldenrod':\n      return 0xdaa520ff;\n    case 'gray':\n      return 0x808080ff;\n    case 'green':\n      return 0x008000ff;\n    case 'greenyellow':\n      return 0xadff2fff;\n    case 'grey':\n      return 0x808080ff;\n    case 'honeydew':\n      return 0xf0fff0ff;\n    case 'hotpink':\n      return 0xff69b4ff;\n    case 'indianred':\n      return 0xcd5c5cff;\n    case 'indigo':\n      return 0x4b0082ff;\n    case 'ivory':\n      return 0xfffff0ff;\n    case 'khaki':\n      return 0xf0e68cff;\n    case 'lavender':\n      return 0xe6e6faff;\n    case 'lavenderblush':\n      return 0xfff0f5ff;\n    case 'lawngreen':\n      return 0x7cfc00ff;\n    case 'lemonchiffon':\n      return 0xfffacdff;\n    case 'lightblue':\n      return 0xadd8e6ff;\n    case 'lightcoral':\n      return 0xf08080ff;\n    case 'lightcyan':\n      return 0xe0ffffff;\n    case 'lightgoldenrodyellow':\n      return 0xfafad2ff;\n    case 'lightgray':\n      return 0xd3d3d3ff;\n    case 'lightgreen':\n      return 0x90ee90ff;\n    case 'lightgrey':\n      return 0xd3d3d3ff;\n    case 'lightpink':\n      return 0xffb6c1ff;\n    case 'lightsalmon':\n      return 0xffa07aff;\n    case 'lightseagreen':\n      return 0x20b2aaff;\n    case 'lightskyblue':\n      return 0x87cefaff;\n    case 'lightslategray':\n      return 0x778899ff;\n    case 'lightslategrey':\n      return 0x778899ff;\n    case 'lightsteelblue':\n      return 0xb0c4deff;\n    case 'lightyellow':\n      return 0xffffe0ff;\n    case 'lime':\n      return 0x00ff00ff;\n    case 'limegreen':\n      return 0x32cd32ff;\n    case 'linen':\n      return 0xfaf0e6ff;\n    case 'magenta':\n      return 0xff00ffff;\n    case 'maroon':\n      return 0x800000ff;\n    case 'mediumaquamarine':\n      return 0x66cdaaff;\n    case 'mediumblue':\n      return 0x0000cdff;\n    case 'mediumorchid':\n      return 0xba55d3ff;\n    case 'mediumpurple':\n      return 0x9370dbff;\n    case 'mediumseagreen':\n      return 0x3cb371ff;\n    case 'mediumslateblue':\n      return 0x7b68eeff;\n    case 'mediumspringgreen':\n      return 0x00fa9aff;\n    case 'mediumturquoise':\n      return 0x48d1ccff;\n    case 'mediumvioletred':\n      return 0xc71585ff;\n    case 'midnightblue':\n      return 0x191970ff;\n    case 'mintcream':\n      return 0xf5fffaff;\n    case 'mistyrose':\n      return 0xffe4e1ff;\n    case 'moccasin':\n      return 0xffe4b5ff;\n    case 'navajowhite':\n      return 0xffdeadff;\n    case 'navy':\n      return 0x000080ff;\n    case 'oldlace':\n      return 0xfdf5e6ff;\n    case 'olive':\n      return 0x808000ff;\n    case 'olivedrab':\n      return 0x6b8e23ff;\n    case 'orange':\n      return 0xffa500ff;\n    case 'orangered':\n      return 0xff4500ff;\n    case 'orchid':\n      return 0xda70d6ff;\n    case 'palegoldenrod':\n      return 0xeee8aaff;\n    case 'palegreen':\n      return 0x98fb98ff;\n    case 'paleturquoise':\n      return 0xafeeeeff;\n    case 'palevioletred':\n      return 0xdb7093ff;\n    case 'papayawhip':\n      return 0xffefd5ff;\n    case 'peachpuff':\n      return 0xffdab9ff;\n    case 'peru':\n      return 0xcd853fff;\n    case 'pink':\n      return 0xffc0cbff;\n    case 'plum':\n      return 0xdda0ddff;\n    case 'powderblue':\n      return 0xb0e0e6ff;\n    case 'purple':\n      return 0x800080ff;\n    case 'rebeccapurple':\n      return 0x663399ff;\n    case 'red':\n      return 0xff0000ff;\n    case 'rosybrown':\n      return 0xbc8f8fff;\n    case 'royalblue':\n      return 0x4169e1ff;\n    case 'saddlebrown':\n      return 0x8b4513ff;\n    case 'salmon':\n      return 0xfa8072ff;\n    case 'sandybrown':\n      return 0xf4a460ff;\n    case 'seagreen':\n      return 0x2e8b57ff;\n    case 'seashell':\n      return 0xfff5eeff;\n    case 'sienna':\n      return 0xa0522dff;\n    case 'silver':\n      return 0xc0c0c0ff;\n    case 'skyblue':\n      return 0x87ceebff;\n    case 'slateblue':\n      return 0x6a5acdff;\n    case 'slategray':\n      return 0x708090ff;\n    case 'slategrey':\n      return 0x708090ff;\n    case 'snow':\n      return 0xfffafaff;\n    case 'springgreen':\n      return 0x00ff7fff;\n    case 'steelblue':\n      return 0x4682b4ff;\n    case 'tan':\n      return 0xd2b48cff;\n    case 'teal':\n      return 0x008080ff;\n    case 'thistle':\n      return 0xd8bfd8ff;\n    case 'tomato':\n      return 0xff6347ff;\n    case 'turquoise':\n      return 0x40e0d0ff;\n    case 'violet':\n      return 0xee82eeff;\n    case 'wheat':\n      return 0xf5deb3ff;\n    case 'white':\n      return 0xffffffff;\n    case 'whitesmoke':\n      return 0xf5f5f5ff;\n    case 'yellow':\n      return 0xffff00ff;\n    case 'yellowgreen':\n      return 0x9acd32ff;\n  }\n  return null;\n}\nmodule.exports = normalizeColor;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}