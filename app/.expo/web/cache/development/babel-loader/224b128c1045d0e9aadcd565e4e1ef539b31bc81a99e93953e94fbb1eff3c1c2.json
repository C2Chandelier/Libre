{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Formik, Field, Form } from \"formik\";\nimport { setUser } from \"../../../redux/Auth/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport api from \"../../../services/api\";\nimport Toast from \"react-native-toast-message\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useTailwind } from \"tailwind-rn\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function Signin() {\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n  var user = useSelector(function (state) {\n    return state.Auth.user;\n  });\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    userIsValid = _useState2[0],\n    setUserIsValid = _useState2[1];\n  var tailwind = useTailwind();\n  if (user) return navigation.navigate(\"Home\");\n  return _jsxs(_Fragment, {\n    children: [_jsx(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: function () {\n        var _ref2 = _asyncToGenerator(function* (_ref, actions) {\n          var email = _ref.email,\n            password = _ref.password;\n          try {\n            var _yield$api$post = yield api.post(`/user/signin`, {\n                email: email,\n                password: password\n              }, navigation),\n              _user = _yield$api$post.user,\n              token = _yield$api$post.token,\n              code = _yield$api$post.code;\n            if (token) api.setToken(token);\n            if (_user) {\n              dispatch(setUser(_user));\n              navigation.navigate(\"Home\");\n            }\n          } catch (e) {\n            console.log(\"ERROR\", e);\n            if (e && [\"EMAIL_OR_PASSWORD_INVALID\", \"USER_NOT_EXISTS\", \"EMAIL_AND_PASSWORD_REQUIRED\"].includes(e.code)) {\n              return setUserIsValid(false);\n            }\n            Toast.show({\n              type: \"error\",\n              text1: `Oups, une erreur est survenue ${e.code}`,\n              duration: 3000\n            });\n          }\n          actions.setSubmitting(false);\n        });\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref3) {\n        var values = _ref3.values,\n          handleChange = _ref3.handleChange,\n          handleSubmit = _ref3.handleSubmit;\n        return _jsxs(Form, {\n          onSubmit: handleSubmit,\n          style: tailwind(\"bg-red-500\"),\n          children: [!userIsValid && _jsx(\"div\", {\n            children: \"E-mail et/ou mot de passe incorrect(s)\"\n          }), _jsxs(\"div\", {\n            children: [_jsx(\"label\", {\n              htmlFor: \"email\",\n              children: \"E-mail\"\n            }), _jsx(Field, {\n              style: tailwind(\"bg-red-500\"),\n              autoComplete: \"username\",\n              name: \"email\",\n              type: \"email\",\n              id: \"email\",\n              placeholder: \"Adresse e-mail\",\n              value: values.email,\n              onChange: handleChange\n            })]\n          }), _jsxs(\"div\", {\n            children: [_jsx(\"label\", {\n              htmlFor: \"password\",\n              children: \"Mot de passe\"\n            }), _jsx(Field, {\n              autoComplete: \"password\",\n              name: \"password\",\n              type: \"password\",\n              id: \"signin_password\",\n              placeholder: \"Mot de passe\",\n              value: values.password,\n              onChange: handleChange\n            })]\n          }), _jsx(\"button\", {\n            type: \"submit\",\n            children: \"Se Connecter\"\n          })]\n        });\n      }\n    }), _jsx(Button, {\n      title: \"S'inscrire\",\n      onPress: function onPress() {\n        return navigation.navigate(\"Signup\");\n      }\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useNavigation","Formik","Field","Form","setUser","useDispatch","useSelector","api","Toast","Button","useTailwind","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Signin","navigation","dispatch","user","state","Auth","_useState","_useState2","_slicedToArray","userIsValid","setUserIsValid","tailwind","navigate","children","initialValues","email","password","onSubmit","_ref2","_asyncToGenerator","_ref","actions","_yield$api$post","post","token","code","setToken","e","console","log","includes","show","type","text1","duration","setSubmitting","_x","_x2","apply","arguments","_ref3","values","handleChange","handleSubmit","style","htmlFor","autoComplete","name","id","placeholder","value","onChange","title","onPress"],"sources":["/Users/charlelie/projects/new/app/src/scenes/auth/components/signin.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Formik, Field, Form } from \"formik\";\nimport { setUser } from \"../../../redux/Auth/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport api from \"../../../services/api\";\nimport Toast from \"react-native-toast-message\";\nimport { Button } from \"react-native\";\nimport { useTailwind } from \"tailwind-rn\";\n\nexport default function Signin() {\n  const navigation = useNavigation();\n  const dispatch = useDispatch();\n  const user = useSelector((state) => state.Auth.user);\n  const [userIsValid, setUserIsValid] = useState(true);\n  const tailwind = useTailwind();\n\n  if (user) return navigation.navigate(\"Home\");\n\n  return (\n    <>\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        onSubmit={async ({ email, password }, actions) => {\n          try {\n            const { user, token, code } = await api.post(\n              `/user/signin`,\n              {\n                email,\n                password,\n              },\n              navigation,\n            );\n            if (token) api.setToken(token);\n            if (user) {\n              dispatch(setUser(user));\n              navigation.navigate(\"Home\");\n            }\n          } catch (e) {\n            console.log(\"ERROR\", e);\n            if (e && [\"EMAIL_OR_PASSWORD_INVALID\", \"USER_NOT_EXISTS\", \"EMAIL_AND_PASSWORD_REQUIRED\"].includes(e.code)) {\n              return setUserIsValid(false);\n            }\n            Toast.show({\n              type: \"error\",\n              text1: `Oups, une erreur est survenue ${e.code}`,\n              duration: 3000,\n            });\n          }\n          actions.setSubmitting(false);\n        }}>\n        {({ values, handleChange, handleSubmit }) => {\n          return (\n            <Form onSubmit={handleSubmit} style={tailwind(\"bg-red-500\")}>\n              {!userIsValid && <div>E-mail et/ou mot de passe incorrect(s)</div>}\n\n              <div>\n                <label htmlFor=\"email\">E-mail</label>\n                <Field\n                  style={tailwind(\"bg-red-500\")}\n                  autoComplete=\"username\"\n                  name=\"email\"\n                  type=\"email\"\n                  id=\"email\"\n                  placeholder=\"Adresse e-mail\"\n                  value={values.email}\n                  onChange={handleChange}\n                />\n              </div>\n              <div>\n                <label htmlFor=\"password\">Mot de passe</label>\n                <Field autoComplete=\"password\" name=\"password\" type=\"password\" id=\"signin_password\" placeholder=\"Mot de passe\" value={values.password} onChange={handleChange} />\n              </div>\n              <button type=\"submit\">Se Connecter</button>\n            </Form>\n          );\n        }}\n      </Formik>\n      <Button title=\"S'inscrire\" onPress={() => navigation.navigate(\"Signup\")}></Button>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}