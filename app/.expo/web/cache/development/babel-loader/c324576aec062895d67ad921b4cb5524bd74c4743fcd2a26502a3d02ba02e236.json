{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport View from \"../../../exports/View\";\nimport StyleSheet from \"../../../exports/StyleSheet\";\nimport { VirtualizedListCellContextProvider } from \"./VirtualizedListContext.js\";\nimport invariant from 'fbjs/lib/invariant';\nimport * as React from 'react';\nvar CellRenderer = function (_React$Component) {\n  _inherits(CellRenderer, _React$Component);\n  var _super = _createSuper(CellRenderer);\n  function CellRenderer() {\n    var _this;\n    _classCallCheck(this, CellRenderer);\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      separatorProps: {\n        highlighted: false,\n        leadingItem: _this.props.item\n      }\n    };\n    _this._separators = {\n      highlight: function highlight() {\n        var _this$props = _this.props,\n          cellKey = _this$props.cellKey,\n          prevCellKey = _this$props.prevCellKey;\n        _this.props.onUpdateSeparators([cellKey, prevCellKey], {\n          highlighted: true\n        });\n      },\n      unhighlight: function unhighlight() {\n        var _this$props2 = _this.props,\n          cellKey = _this$props2.cellKey,\n          prevCellKey = _this$props2.prevCellKey;\n        _this.props.onUpdateSeparators([cellKey, prevCellKey], {\n          highlighted: false\n        });\n      },\n      updateProps: function updateProps(select, newProps) {\n        var _this$props3 = _this.props,\n          cellKey = _this$props3.cellKey,\n          prevCellKey = _this$props3.prevCellKey;\n        _this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);\n      }\n    };\n    _this._onLayout = function (nativeEvent) {\n      _this.props.onCellLayout && _this.props.onCellLayout(nativeEvent, _this.props.cellKey, _this.props.index);\n    };\n    return _this;\n  }\n  _createClass(CellRenderer, [{\n    key: \"updateSeparatorProps\",\n    value: function updateSeparatorProps(newProps) {\n      this.setState(function (state) {\n        return {\n          separatorProps: _objectSpread(_objectSpread({}, state.separatorProps), newProps)\n        };\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onUnmount(this.props.cellKey);\n    }\n  }, {\n    key: \"_renderElement\",\n    value: function _renderElement(renderItem, ListItemComponent, item, index) {\n      if (renderItem && ListItemComponent) {\n        console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');\n      }\n      if (ListItemComponent) {\n        return React.createElement(ListItemComponent, {\n          item: item,\n          index: index,\n          separators: this._separators\n        });\n      }\n      if (renderItem) {\n        return renderItem({\n          item: item,\n          index: index,\n          separators: this._separators\n        });\n      }\n      invariant(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n        CellRendererComponent = _this$props4.CellRendererComponent,\n        ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,\n        ListItemComponent = _this$props4.ListItemComponent,\n        cellKey = _this$props4.cellKey,\n        horizontal = _this$props4.horizontal,\n        item = _this$props4.item,\n        index = _this$props4.index,\n        inversionStyle = _this$props4.inversionStyle,\n        onCellFocusCapture = _this$props4.onCellFocusCapture,\n        onCellLayout = _this$props4.onCellLayout,\n        renderItem = _this$props4.renderItem;\n      var element = this._renderElement(renderItem, ListItemComponent, item, index);\n      var itemSeparator = React.isValidElement(ItemSeparatorComponent) ? ItemSeparatorComponent : ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, this.state.separatorProps);\n      var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;\n      var result = !CellRendererComponent ? React.createElement(View, _extends({\n        style: cellStyle,\n        onFocusCapture: onCellFocusCapture\n      }, onCellLayout && {\n        onLayout: this._onLayout\n      }), element, itemSeparator) : React.createElement(CellRendererComponent, _extends({\n        cellKey: cellKey,\n        index: index,\n        item: item,\n        style: cellStyle,\n        onFocusCapture: onCellFocusCapture\n      }, onCellLayout && {\n        onLayout: this._onLayout\n      }), element, itemSeparator);\n      return React.createElement(VirtualizedListCellContextProvider, {\n        cellKey: this.props.cellKey\n      }, result);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, prevState) {\n      return {\n        separatorProps: _objectSpread(_objectSpread({}, prevState.separatorProps), {}, {\n          leadingItem: props.item\n        })\n      };\n    }\n  }]);\n  return CellRenderer;\n}(React.Component);\nexport { CellRenderer as default };\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  rowReverse: {\n    flexDirection: 'row-reverse'\n  },\n  columnReverse: {\n    flexDirection: 'column-reverse'\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}