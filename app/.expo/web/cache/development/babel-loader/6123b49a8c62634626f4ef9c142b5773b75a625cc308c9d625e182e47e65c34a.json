{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nexport var StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n        routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread(_objectSpread({}, route), {}, {\n          key: route.key || `${route.name}-${nanoid()}`,\n          params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n        });\n      });\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeKeyChanges = _ref3.routeKeyChanges;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);\n      });\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            var _action$payload = action.payload,\n              name = _action$payload.name,\n              key = _action$payload.key,\n              params = _action$payload.params;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : `${name}-${nanoid()}`,\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n                } : route;\n              })\n            });\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            var getId = options.routeGetIdList[action.payload.name];\n            var id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            var route = id ? state.routes.find(function (route) {\n              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              }));\n            }) : undefined;\n            var routes;\n            if (route) {\n              routes = state.routes.filter(function (r) {\n                return r.key !== route.key;\n              });\n              routes.push(_objectSpread(_objectSpread({}, route), {}, {\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }));\n            } else {\n              routes = [].concat(_toConsumableArray(state.routes), [{\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: routes.length - 1,\n              routes: routes\n            });\n          }\n          return null;\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n            if (_index > 0) {\n              var count = Math.max(_index - action.payload.count + 1, 1);\n              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: _routes.length - 1,\n                routes: _routes\n              });\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path;\n            var _index2 = -1;\n            var _getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({\n              params: action.payload.params\n            });\n            if (_id) {\n              _index2 = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({\n                  params: route.params\n                }));\n              });\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n              var _routes2 = [].concat(_toConsumableArray(state.routes), [{\n                key: (_action$payload$key = action.payload.key) != null ? _action$payload$key : `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes: _routes2,\n                index: _routes2.length - 1\n              });\n            }\n            var _route = state.routes[_index2];\n            var _params;\n            if (action.payload.merge) {\n              _params = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[_route.name]), _route.params), action.payload.params) : _route.params;\n            } else {\n              _params = routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[_route.name]), action.payload.params) : action.payload.params;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: _index2,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index2)), [_params !== _route.params || action.payload.path && action.payload.path !== _route.path ? _objectSpread(_objectSpread({}, _route), {}, {\n                path: (_action$payload$path = action.payload.path) != null ? _action$payload$path : _route.path,\n                params: _params\n              }) : state.routes[_index2]])\n            });\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n  return router;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}