{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getHeaderTitle, HeaderShownContext } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport debounce from \"../../utils/debounce\";\nimport ModalPresentationContext from \"../../utils/ModalPresentationContext\";\nimport HeaderSegment from \"./HeaderSegment\";\nexport default React.memo(function Header(_ref) {\n  var back = _ref.back,\n    layout = _ref.layout,\n    progress = _ref.progress,\n    options = _ref.options,\n    route = _ref.route,\n    navigation = _ref.navigation,\n    styleInterpolator = _ref.styleInterpolator;\n  var insets = useSafeAreaInsets();\n  var previousTitle;\n  if (options.headerBackTitle !== undefined) {\n    previousTitle = options.headerBackTitle;\n  } else if (back) {\n    previousTitle = back.title;\n  }\n  var goBack = React.useCallback(debounce(function () {\n    if (navigation.isFocused() && navigation.canGoBack()) {\n      navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n        source: route.key\n      }));\n    }\n  }, 50), [navigation, route.key]);\n  var isModal = React.useContext(ModalPresentationContext);\n  var isParentHeaderShown = React.useContext(HeaderShownContext);\n  var statusBarHeight = options.headerStatusBarHeight !== undefined ? options.headerStatusBarHeight : isModal || isParentHeaderShown ? 0 : insets.top;\n  return React.createElement(HeaderSegment, _extends({}, options, {\n    title: getHeaderTitle(options, route.name),\n    progress: progress,\n    layout: layout,\n    modal: isModal,\n    headerBackTitle: options.headerBackTitle !== undefined ? options.headerBackTitle : previousTitle,\n    headerStatusBarHeight: statusBarHeight,\n    onGoBack: back ? goBack : undefined,\n    styleInterpolator: styleInterpolator\n  }));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}