{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _createForOfIteratorHelperLoose from \"@babel/runtime/helpers/createForOfIteratorHelperLoose\";\nimport invariant from 'fbjs/lib/invariant';\nvar ChildListCollection = function () {\n  function ChildListCollection() {\n    _classCallCheck(this, ChildListCollection);\n    this._cellKeyToChildren = new Map();\n    this._childrenToCellKey = new Map();\n  }\n  _createClass(ChildListCollection, [{\n    key: \"add\",\n    value: function add(list, cellKey) {\n      var _this$_cellKeyToChild;\n      invariant(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n      var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild !== void 0 ? _this$_cellKeyToChild : new Set();\n      cellLists.add(list);\n      this._cellKeyToChildren.set(cellKey, cellLists);\n      this._childrenToCellKey.set(list, cellKey);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(list) {\n      var cellKey = this._childrenToCellKey.get(list);\n      invariant(cellKey != null, 'Trying to remove non-present child list');\n      this._childrenToCellKey.delete(list);\n      var cellLists = this._cellKeyToChildren.get(cellKey);\n      invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n      cellLists.delete(list);\n      if (cellLists.size === 0) {\n        this._cellKeyToChildren.delete(cellKey);\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      for (var _iterator = _createForOfIteratorHelperLoose(this._cellKeyToChildren.values()), _step; !(_step = _iterator()).done;) {\n        var listSet = _step.value;\n        for (var _iterator2 = _createForOfIteratorHelperLoose(listSet), _step2; !(_step2 = _iterator2()).done;) {\n          var list = _step2.value;\n          fn(list);\n        }\n      }\n    }\n  }, {\n    key: \"forEachInCell\",\n    value: function forEachInCell(cellKey, fn) {\n      var _this$_cellKeyToChild2;\n      var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild2 !== void 0 ? _this$_cellKeyToChild2 : [];\n      for (var _iterator3 = _createForOfIteratorHelperLoose(listSet), _step3; !(_step3 = _iterator3()).done;) {\n        var list = _step3.value;\n        fn(list);\n      }\n    }\n  }, {\n    key: \"anyInCell\",\n    value: function anyInCell(cellKey, fn) {\n      var _this$_cellKeyToChild3;\n      var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild3 !== void 0 ? _this$_cellKeyToChild3 : [];\n      for (var _iterator4 = _createForOfIteratorHelperLoose(listSet), _step4; !(_step4 = _iterator4()).done;) {\n        var list = _step4.value;\n        if (fn(list)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this._childrenToCellKey.size;\n    }\n  }]);\n  return ChildListCollection;\n}();\nexport { ChildListCollection as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}