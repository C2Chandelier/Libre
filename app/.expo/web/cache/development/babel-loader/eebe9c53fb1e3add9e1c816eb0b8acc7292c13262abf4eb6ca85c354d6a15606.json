{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Formik, Field, Form } from \"formik\";\nimport { setUser } from \"../../../redux/Auth/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport api from \"../../../services/api\";\nimport Toast from \"react-native-toast-message\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useTailwind } from \"tailwind-rn\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function Signin() {\n  var navigation = useNavigation();\n  var dispatch = useDispatch();\n  var user = useSelector(function (state) {\n    return state.Auth.user;\n  });\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    userIsValid = _useState2[0],\n    setUserIsValid = _useState2[1];\n  var tailwind = useTailwind();\n  if (user) return navigation.navigate(\"Home\");\n  return _jsxs(_Fragment, {\n    children: [_jsx(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: function () {\n        var _ref2 = _asyncToGenerator(function* (_ref, actions) {\n          var email = _ref.email,\n            password = _ref.password;\n          try {\n            var _yield$api$post = yield api.post(`/user/signin`, {\n                email: email,\n                password: password\n              }, navigation),\n              _user = _yield$api$post.user,\n              token = _yield$api$post.token,\n              code = _yield$api$post.code;\n            if (token) api.setToken(token);\n            if (_user) {\n              dispatch(setUser(_user));\n              navigation.navigate(\"Home\");\n            }\n          } catch (e) {\n            console.log(\"ERROR\", e);\n            if (e && [\"EMAIL_OR_PASSWORD_INVALID\", \"USER_NOT_EXISTS\", \"EMAIL_AND_PASSWORD_REQUIRED\"].includes(e.code)) {\n              return setUserIsValid(false);\n            }\n            Toast.show({\n              type: \"error\",\n              text1: `Oups, une erreur est survenue ${e.code}`,\n              duration: 3000\n            });\n          }\n          actions.setSubmitting(false);\n        });\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref3) {\n        var values = _ref3.values,\n          handleChange = _ref3.handleChange,\n          handleSubmit = _ref3.handleSubmit;\n        return _jsxs(Form, {\n          onSubmit: handleSubmit,\n          style: tailwind(\"bg-red-500\"),\n          children: [!userIsValid && _jsx(\"div\", {\n            children: \"E-mail et/ou mot de passe incorrect(s)\"\n          }), _jsxs(\"div\", {\n            children: [_jsx(\"label\", {\n              htmlFor: \"email\",\n              children: \"E-mail\"\n            }), _jsx(Field, {\n              autoComplete: \"username\",\n              name: \"email\",\n              type: \"email\",\n              id: \"email\",\n              placeholder: \"Adresse e-mail\",\n              value: values.email,\n              onChange: handleChange\n            })]\n          }), _jsxs(\"div\", {\n            children: [_jsx(\"label\", {\n              htmlFor: \"password\",\n              children: \"Mot de passe\"\n            }), _jsx(Field, {\n              autoComplete: \"password\",\n              name: \"password\",\n              type: \"password\",\n              id: \"signin_password\",\n              placeholder: \"Mot de passe\",\n              value: values.password,\n              onChange: handleChange\n            })]\n          }), _jsx(\"button\", {\n            type: \"submit\",\n            children: \"Se Connecter\"\n          })]\n        });\n      }\n    }), _jsx(Button, {\n      title: \"S'inscrire\",\n      onPress: function onPress() {\n        return navigation.navigate(\"Signup\");\n      }\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}